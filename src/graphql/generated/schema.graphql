### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Category {
  id: Int!
  name: String!
  posts(
    after: PostWhereUniqueInput
    before: PostWhereUniqueInput
    first: Int!
    last: Int!
    skip: Int!
  ): [Post!]!
}

input CategoryCreateInput {
  name: String!
  posts: PostCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateWithoutPostsInput {
  name: String!
}

input CategoryWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneProfile(data: ProfileCreateInput!): Profile!
  createOneUser(data: UserCreateInput!): User!
  ok: Boolean!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt

type Post {
  author: User!
  authorId: Int!
  categories(
    after: CategoryWhereUniqueInput
    before: CategoryWhereUniqueInput
    first: Int!
    last: Int!
    skip: Int!
  ): [Category!]!
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutCategoriesInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutCategoriesInput!]
}

input PostCreateWithoutAuthorInput {
  categories: CategoryCreateManyWithoutPostsInput
  createdAt: DateTime
  published: Boolean
  title: String!
}

input PostCreateWithoutCategoriesInput {
  author: UserCreateOneWithoutPostsInput!
  createdAt: DateTime
  published: Boolean
  title: String!
}

input PostWhereUniqueInput {
  id: Int
}

type Profile {
  bio: String!
  id: Int!
  user: User!
  userId: Int!
}

input ProfileCreateInput {
  bio: String!
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  bio: String!
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  ok: Boolean!
  posts: [Post!]!
  profiles: [Profile!]!
  users: [User!]!
}

enum Role {
  ADMIN
  USER
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User {
  email: String!
  id: Int!
  name: String
  posts(
    after: PostWhereUniqueInput
    before: PostWhereUniqueInput
    first: Int!
    last: Int!
    skip: Int!
  ): [Post!]!
  profile: Profile
  role: Role!
}

input UserCreateInput {
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
  role: Role
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfileInput
}

input UserCreateWithoutPostsInput {
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  role: Role
}

input UserCreateWithoutProfileInput {
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
  role: Role
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
